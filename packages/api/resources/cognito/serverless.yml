service: securus-cognito

resources:
  Description: Cognito Stack for securus GraphQL API
  Resources:
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${self:provider.stage}-user-pool
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: True
            RequireNumbers: True
            RequireSymbols: False
            RequireUppercase: True

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-${self:provider.stage}-user-pool-client
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false

    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: ${self:service}-${self:provider.stage}-pool
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId:
              Ref: CognitoUserPoolClient
            ProviderName:
              Fn::GetAtt: ['CognitoUserPool', 'ProviderName']

    # IAM roles
    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: CognitoIdentityPool
        Roles:
          authenticated:
            Fn::GetAtt: [CognitoAuthRole, Arn]
          unauthenticated:
            Fn::GetAtt: [CognitoUnauthRole, Arn]

    # IAM role used for authenticated users
    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Federated: 'cognito-identity.amazonaws.com'
              Action:
                - 'sts:AssumeRoleWithWebIdentity'
              Condition:
                StringEquals:
                  'cognito-identity.amazonaws.com:aud':
                    Ref: CognitoIdentityPool
                'ForAnyValue:StringLike':
                  'cognito-identity.amazonaws.com:amr': authenticated
        Policies:
          - PolicyName: 'CognitoAuthorizedPolicy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'mobileanalytics:PutEvents'
                    - 'cognito-sync:*'
                    - 'cognito-identity:*'
                  Resource: '*' # TODO: Filter resources, this is dangerous
                - Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:PutObject
                    - s3:DeleteObject
                  Resource:
                    - arn:aws:s3:::s3curus/public/*
                    - arn:aws:s3:::s3curus/protected/*
                    - arn:aws:s3:::s3curus/private/*
                - Action:
                    - s3:PutObject
                  Resource:
                    - arn:aws:s3:::s3curus/uploads/*
                  Effect: Allow
                - Action:
                    - s3:GetObject
                  Resource:
                    - arn:aws:s3:::s3curus/protected/*
                  Effect: Allow
                - Condition:
                    StringLike:
                      s3:prefix:
                        - public/
                        - public/*
                        - protected/
                        - protected/*
                        # - private/${cognito-identity.amazonaws.com:sub}/ # TODO: Fix disregard for protection settings
                        - private/
                        - private/*
                  Action:
                    - s3:ListBucket
                  Resource:
                    - arn:aws:s3:::s3curus
                  Effect: Allow
        Tags:
          - Key: project
            Value: securus
          - Key: service
            Value: ${self:service}

    CognitoUnauthRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Service:
                  - 's3.amazonaws.com'
              Action:
                - 'sts:AssumeRole'
        Policies:
          - PolicyName: 'CognitoAuthorizedPolicy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Action:
                    - s3:GetObject
                    - s3:PutObject
                    - s3:DeleteObject
                  Resource:
                    - arn:aws:s3:::s3curus/public/*
                  Effect: Allow
                - Action:
                    - s3:PutObject
                  Resource:
                    - arn:aws:s3:::s3curus/uploads/*
                  Effect: Allow
                - Action:
                    - s3:GetObject
                  Resource:
                    - arn:aws:s3:::s3curus/protected/*
                  Effect: Allow
                - Condition:
                    StringLike:
                      s3:prefix:
                        - public/
                        - public/*
                        - protected/
                        - protected/*
                  Action:
                    - s3:ListBucket
                  Resource:
                    - arn:aws:s3:::s3curus
                  Effect: Allow
        Tags:
          - Key: project
            Value: securus
          - Key: service
            Value: ${self:service}

  Outputs:
    UserPoolId:
      Value:
        Ref: CognitoUserPool
      Export:
        Name: UserPoolId-securus
    UserPoolClientId:
      Value:
        Ref: CognitoUserPoolClient
    IdentityPoolId:
      Value:
        Ref: CognitoIdentityPool

custom:
  output:
    file: ./stack.${self:provider.stage}.json

plugins:
  - serverless-stack-output

provider:
  name: aws
  region: ap-southeast-1
  stage: dev
  lambdaHashingVersion: '20201221'
  tags:
    project: securus
    service: ${self:service}

frameworkVersion: '>=2.21.0'
