# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. RUN scripts/combineSchemas TO REGENERATE

schema {
  query: Query
  mutation: Mutation
}

type ActivatedPowerup @aws_api_key {
  name: Powerup
  expiresAt: AWSDateTime
}

type AnyUser implements User @aws_api_key {
  userId: ID!
  name: String!
}

enum Avatar {
  AZURE_ENGINEER
  YOUTUBER
  SAFE_DISTANCING_AMBASSADOR
  ARTIST
  AWS_ENGINEER
}

type AvatarItem implements StockItem @aws_api_key {
  name: Avatar!
  quantity: Int!
  price: Int!
}

type Camera @aws_api_key {
  cameraId: ID!
  name: String!
  latitude: String!
  longitude: String!
  address: String!
}

type CrowdsourceReward @aws_api_key {
  pass: Boolean!
  coinsEarned: Int!
  coinTotal: Int!
}

type Defendant implements User @aws_api_key {
  userId: ID!
  name: String!
  imageUrl: AWSURL!
  appealId: ID!
  appealTime: AWSDateTime!
}

type Friend implements User @aws_api_key {
  userId: ID!
  name: String!
  befriendDate: AWSDateTime!
  pairStreak: Streak!
}

type IncriminatingImage @aws_api_key {
  captureTime: AWSDateTime!
  imageUrl: AWSURL!
  camera: Camera!
}

input InputUser {
  userId: ID!
  name: String!
}

input LabelledImage {
  label: Boolean!
  imageUrl: AWSURL!
  appealId: ID!
}

enum LeaderboardDivision {
  JEFFBEZOS
  FORTUNE500
  TITANIUM
  PLATINUM
  GOLD
  SILVER
  BRONZE
}

type LeaderboardRow @aws_api_key {
  userId: ID!
  division: LeaderboardDivision!
  rank: Int
  coinTotal: Int!
  currentStreak: Int!
}

type LoadedAppeal @aws_api_key {
  defendant: Defendant!
  isTest: Boolean!
}

type MaskOnReward @aws_api_key {
  coinsEarned: Int!
  coinTotal: Int!
  currentStreak: Int!
}

type Mutation {
  createBubble(userId: ID!): ID! @aws_api_key
  entangleBubble(bubbleId: ID!, newcomerId: ID!): Int! @aws_api_key
  untangleBubble(userId: ID!): Int! @aws_api_key
  makeFriend(initiator: InputUser!, newFriend: InputUser!): Friend! @aws_api_key
  crowdsourceLabelImage(
    jurorUserId: ID!
    labels: [LabelledImage!]!
  ): CrowdsourceReward! @aws_api_key
  submitAppeal(user: InputUser!, imageUrl: AWSURL!): ID! @aws_api_key
  createProfile(name: String!, faceIdUrl: AWSURL!): Profile! @aws_api_key
  earnCoins(userId: ID!, nearCameraId: ID!): MaskOnReward! @aws_api_key
  identifyCitizen(imageUrl: AWSURL!, cameraId: ID!, judgement: Boolean!): Int!
    @aws_iam
  activatePowerup(userId: ID!, powerup: Powerup!): ActivatedPowerup!
    @aws_api_key
  buy(userId: ID!, price: Int!, avatar: Avatar, powerup: Powerup): Int!
    @aws_api_key
  selectAvatar(userId: ID!, avatar: Avatar!): Avatar! @aws_api_key
}

type Pong @aws_api_key {
  pong: String!
}

enum Powerup {
  FREEZE
  X2COIN
  X3COIN
}

type PowerupItem implements StockItem @aws_api_key {
  name: Powerup!
  quantity: Int!
  price: Int!
}

type Profile implements User @aws_api_key {
  name: String!
  userId: ID!
  leaderboard: LeaderboardRow!
  bubbleId: ID
  friends: [Friend!]!
  arsenal: StockRoom!
  faceIdUrl: AWSURL
}

type Query {
  getBubble(bubbleId: ID!): [AnyUser!]! @aws_api_key
  listFriends(userId: ID!): [Friend!]! @aws_api_key
  getLeaderboardClosest(userId: ID!, nClosest: Int): [LeaderboardRow!]!
    @aws_api_key
  getLeaderboardTop(nTop: Int): [LeaderboardRow!]! @aws_api_key
  loadAppeals(imageCount: Int): [LoadedAppeal!]! @aws_api_key
  ping(ping: String!): Pong! @aws_api_key
  getProfile(userId: ID!, isMe: Boolean!): Profile! @aws_api_key
  getCameras: [Camera!]! @aws_api_key
  getIncriminatingImage(userId: ID!): IncriminatingImage! @aws_api_key
  listArsenal(userId: ID!): StockRoom! @aws_api_key
}

interface StockItem {
  quantity: Int!
  price: Int!
}

type StockRoom @aws_api_key {
  powerups: [PowerupItem!]
  avatars: [AvatarItem!]!
  coinTotal: Int!
  currentAvatar: Avatar!
  currentPowerup: ActivatedPowerup
  purchaseSuccess: Boolean
}

type Streak @aws_api_key {
  max: Int!
  current: Int!
  isFrozen: Boolean!
}

interface User {
  userId: ID!
  name: String!
}
