Resources:
  AppSyncDynamoDBRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'appsync.amazonaws.com'
                - 'dynamodb.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Tags:
        - Key: project
          Value: securus
        - Key: service
          Value: ${self:service}

  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        # Allows Lambda to log events
        - PolicyName: '${self:service}-lambda-logging-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - 'Fn::Join':
                      - ':'
                      - - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
      Tags:
        - Key: project
          Value: securus
        - Key: service
          Value: ${self:service}

  # Allows AppSync and Lambda to access DynamoDB Table
  DDBTablePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: '${self:service}-dynamo-policy'
      Roles:
        - Ref: AppSyncDynamoDBRole
        - Ref: LambdaRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action:
              - 'dynamodb:Query'
              - 'dynamodb:ConditionalCheckItem'
              - 'dynamodb:BatchWriteItem'
              - 'dynamodb:BatchGetItem'
              - 'dynamodb:GetItem'
              - 'dynamodb:DeleteItem'
              - 'dynamodb:PutItem'
              - 'dynamodb:UpdateItem'
            Resource:
              - Fn::ImportValue: DDBTableArnSecurus
              - Fn::Join:
                  - ''
                  - - { Fn::ImportValue: DDBTableArnSecurus }
                    - '/index/*'

  # Allows AppSync layer to invoke Lambda function
  AppSyncLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      # RoleName: 'Lambda-${self:service}-Role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'appsync.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: '${self:service}-appsync-lambda-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'lambda:InvokeFunction'
                Resource:
                  - 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-*'
      Tags:
        - Key: project
          Value: securus
        - Key: service
          Value: ${self:service}
